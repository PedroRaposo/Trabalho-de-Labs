'''
Created on 20/01/2016

@author: Pedro
'''

import re

file = open("ProteinTable.txt","r")

prots = []
for prot in file:
    prots.append(prot)

prots.pop(0)

prots6 = []
for prot in prots:
    chave = re.search("TP_RS[0-9]+",prot)
    locus_tag = chave.group()
    locus_tag = locus_tag[5:10]
    if int(locus_tag) > 2955 and int(locus_tag) < 3535:
        prots6.append(prot)

funcs = []
for prot in prots6:
    proc = re.finditer("\\t",prot)
    i = 0
    for num in proc:
        i += 1
        if i == 10:
            func = prot[int(num.span()[1]):len(prot) - 1]
            if "MULTISPECIES: " in func:
                func = func[14:len(func)]
            funcs.append(func)

funcs2 = ['phosphocarrier protein HPr', 'HPr kinase/phosphorylase', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'adenylate kinase', 'polynucleotide adenylyltransferase', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'zinc metalloprotease', '1-deoxy-D-xylulose-5-phosphate reductoisomerase', 'phosphatidate cytidylyltransferase', 'isoprenyl transferase', 'ribosome recycling factor', 'elongation factor Ts', '30S ribosomal protein S2', 'hypothetical protein', 'hypothetical protein', 'asparaginyl- tRNA synthetase', 'hypothetical protein', 'ABC transporter ATP-binding protein', 'Fe-S cluster assembly protein SufB', 'Fe-S cluster assembly protein SufD', 'cysteine desulfurase', 'iron-sulfur cluster assembly scaffold protein NifU', 'ribose-5-phosphate isomerase', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'membrane protein', 'lytic transglycosylase', 'hypothetical protein', 'hypothetical protein', 'metallophosphatase', 'nuclease SbcCD subunit C', 'nicotinate phosphoribosyltransferase', 'hypothetical protein', 'chemotaxis protein CheR', 'chemotaxis response regulator protein-glutamate methylesterase', 'tryptophan--tRNA ligase', 'peptide methionine sulfoxide reductase MsrB/MsrA', 'DNA ligase (NAD(+)) LigA', 'recombinase RecO', 'tRNA dimethylallyltransferase', 'hypothetical protein', 'chemotaxis protein', 'chemotaxis protein', 'histidine--tRNA ligase', 'phosphomannomutase', 'DNA polymerase III subunit epsilon', 'lysine--tRNA ligase', 'hypothetical protein', 'serine--tRNA ligase', 'hypothetical protein', 'hemolysin', 'endoribonuclease YbeY', 'hydrolase', 'spermidine/putrescine ABC transporter ATP-binding protein', 'spermidine/putrescine ABC transporter permease', 'spermidine/putrescine ABC transporter permease', 'spermidine/putrescine ABC transporter substrate-binding protein', 'carbon storage regulator', 'flagellar assembly factor FliW', 'flagellar hook-associated protein FlgL', 'flagellar hook protein FlgK', 'hypothetical protein', 'fructose-bisphosphate aldolase', 'membrane protein', 'flagellar filament protein FlaA', 'hypothetical protein', 'hypothetical protein', 'uridine kinase', 'membrane protein', 'DNA polymerase III subunit alpha', 'hypothetical protein', '1,2-diacylglycerol cholinephosphotransferase', 'glycine--tRNA ligase', 'glutamate--tRNA ligase', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'hypothetical protein', 'N(6)-L-threonylcarbamoyladenine synthase TsaD', 'alanine racemase', 'ribosomal RNA large subunit methyltransferase E', 'octaprenyl-diphosphate synthase', 'glucose/galactose-binding lipoprotein', 'galactose/methyl galactoside import ATP-binding protein MglA', 'galactoside ABC transporter permease', 'ATP-dependent DNA helicase RecG', 'peptidase S66', 'ribosome biogenesis GTPase Der', 'hypothetical protein', 'hypothetical protein', 'DNA recombination/repair protein RecA', 'hypothetical protein', '5-formyltetrahydrofolate cyclo-ligase', 'phosphoribosylglycinamide formyltransferase']

verif = []
for funcao in range(len(funcs)): 
    if funcs[funcao] == funcs2[funcao]:
        verif.append(True)
    else:
        verif.append(False)

conclusao = 0
for confir in range(len(verif)):
    if verif[confir] == False:
        conclusao += 1
 
if conclusao > 0:
    print("Nao se confirma que as funcoes sao iguais.")
else:
    print("Confirma-se que as funcoes sao iguais.")
